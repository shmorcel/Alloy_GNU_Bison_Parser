#line 2 "/home/sinan/repos/research/alloy_bison_parser/build/mc_lexer.yy.cc"

#line 4 "/home/sinan/repos/research/alloy_bison_parser/build/mc_lexer.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int MC::MC_Scanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[386] =
    {   0,
        0,    0,  121,  120,   45,   44,  106,  107,   86,   75,
       76,  109,   87,   81,   88,   92,  113,  119,  112,  114,
      102,  101,  103,   69,  118,   79,   80,  110,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,   77,   82,   78,  108,    0,   39,
       37,   40,    0,   84,   89,   46,   93,    0,  119,  111,
       91,   90,  104,  104,   99,  105,  118,  118,  118,  118,
      118,  118,  118,   49,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  100,  118,  118,
      118,   94,  118,  118,   83,  118,  118,  118,  118,  118,

      118,  118,  118,   83,   41,   42,   38,   46,    0,    0,
        0,    0,    0,    0,   85,  118,  118,  118,  118,  118,
       84,  118,  118,   66,  118,  118,  118,  118,  118,  118,
      118,   65,   61,  118,   85,  118,   74,  118,  118,  118,
        0,  118,  106,   98,  118,  118,   63,  117,   95,   55,
      118,  118,  118,  118,    0,    0,    0,    0,   43,  118,
      118,  118,    0,  118,  118,  118,  118,   57,  118,   70,
      118,  118,   59,   73,  118,   96,   54,  118,    0,    0,
       71,  118,    0,    0,   48,   60,    0,    0,   97,    0,
       68,   72,    0,   30,   29,    0,  118,  118,   52,    0,

        0,  118,  118,  118,   64,  118,  118,  118,  118,    0,
        0,  118,    0,    0,    2,    0,    0,   38,    0,    0,
       34,   33,    0,    0,  118,    0,    0,   31,   32,  118,
       51,    0,    0,    4,    0,    0,  116,   62,   53,  118,
      118,  118,  118,    0,    0,   35,   47,    0,    0,    0,
       12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   36,  118,    0,    0,    6,    0,    0,
      118,    0,   58,   67,   56,   99,    0,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,    0,    0,

        0,    0,    0,    0,  118,    0,   50,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   18,   17,    0,    0,
       14,   13,    0,    0,    0,    0,    0,    0,  118,    0,
        0,    0,    0,   22,   21,    0,    0,    0,   19,   20,
       15,   16,    0,    0,   26,   25,    0,  115,    0,    0,
        0,   23,   24,    0,    0,    1,    0,    0,    0,   27,
       28,    0,    0,    0,    3,    0,    0,    0,    0,   11,
        0,    0,    0,    0,    5,    0,    0,    0,    7,    0,
        0,    0,    9,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    1,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,   23,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,    1,   26,   27,   24,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   24,   53,   54,   55,   56,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[57] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    4,    1,    1,
        1,    1,    5,    6,    1,    1,    4,    5,    1,    1,
        1,    1,    1,    7,    1,    1,    1,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[413] =
    {   0,
        0,    0,  868, 1088, 1088, 1088,   55, 1088,  857, 1088,
     1088, 1088,  850, 1088,   46, 1088,   50,  840,   41, 1088,
       46,   49,  834, 1088,  846, 1088, 1088, 1088,   57,   62,
       64,   65,   70,   72,   71,   73,   66,   74,   81,   80,
       75,   98,   84,   77, 1088,  798, 1088, 1088,  129,  822,
      818,  816,  792, 1088, 1088,    0,  125,  820,  809, 1088,
     1088, 1088,  802, 1088, 1088, 1088,  815,  813,   89,  105,
      128,  129,   76,  130,  133,  131,  137,  134,  136,  135,
      145,  140,  139,  146,  150,  152,  147,  804,  148,  155,
      175,  196,  154,  180,  799,  181,  153,  164,  183,  185,

      193,  166,  195, 1088, 1088, 1088, 1088,    0,  212,  760,
      753,  177,  782,  194, 1088,  199,  212,  210,  219,  216,
      781,  218,  220,  779,  222,  224,  221,  227,  226,  228,
      230,  774,  772,  231,  771,  232,  769,  233,  237,  239,
      264,  247,  280,  289,  245,  265,  760,  755,  303,  754,
      249,  306,  266,  255,  715,  719,  702,  708,  736,  268,
      256,  270,  316,  277,  281,  282,  261,  738,  313,  730,
      286,  314,  729,  725,  315,  328,  723,  317,  336,  355,
      714,  320,  362,  699,  711,  706,  367,  691,  375,  382,
      703,  700,  675, 1088, 1088,  670,  344,  326,  692,  392,

      399,  316,  327,  367,  690,  352,  372,  384,  374,  416,
      675,  382,  421,  424, 1088,  658,  351,  685,  441,  448,
      429,  460,  474,  662,  400,  477,  490, 1088, 1088,  408,
      674,  507,  510, 1088,  645,  412,  659,  658,  656,  452,
      401,  421,  461,  514,  527,  534,  654,  309,  539,  546,
     1088,  625,  419,  551,  617,  617,  441,  563,  605,  605,
      454,  566,  583,  579,  432,  604,  610, 1088,  608,  451,
      492,  497,  633,  631,  629,  628,  627,  630, 1088,  588,
      455,  596,  569,  554,  514,  558,  535,  551,  545,  528,
      518,  506,  512,  477,  481,  647,  650, 1088,  483,  542,

      653,  473,  463,  578,  438,  567,  481,  667,  579,  433,
      425,  394,  381,  670,  673,  372, 1088, 1088,  366,  318,
     1088, 1088,  316,  590,  302,  309,  290,  235,  543,  676,
      683,  687,  238, 1088, 1088,  127,  702,  714, 1088, 1088,
     1088, 1088,  722,  125, 1088, 1088,   63,   85,  726,  732,
      739, 1088, 1088,  751,  757, 1088,  763,  770,  782, 1088,
     1088,  788,  795,  801, 1088,  807,  814,  826,  832, 1088,
      838,  845,  857,  863, 1088,  869,  876,  882, 1088,  888,
      895,  901, 1088,  907, 1088,  922,  929,  936,  942,  948,
      954,  960,  966,  972,  978,  984,  990,  996, 1002, 1008,

     1014, 1020, 1026, 1032, 1038, 1044, 1050, 1056, 1062, 1068,
     1074, 1080
    } ;

static const flex_int16_t yy_def[413] =
    {   0,
      385,    1,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  386,  385,  385,  385,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  387,  385,  388,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  385,  385,  385,  385,  387,  385,  385,
      385,  385,  388,  388,  385,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      389,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  385,  385,  385,  385,  388,  386,
      386,  386,  390,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  391,  391,
      386,  386,  392,  385,  386,  386,  385,  385,  386,  393,
      386,  386,  385,  385,  385,  385,  386,  386,  386,  394,

      394,  386,  386,  386,  386,  386,  386,  386,  386,  395,
      385,  386,  385,  385,  385,  180,  180,  386,  396,  396,
      385,  385,  397,  385,  386,  398,  398,  385,  385,  386,
      386,  385,  385,  385,  201,  201,  386,  386,  386,  386,
      386,  386,  386,  399,  399,  385,  386,  180,  385,  385,
      385,  220,  220,  385,  385,  385,  385,  385,  385,  385,
      385,  400,  400,  385,  386,  385,  385,  385,  227,  227,
      386,  201,  386,  386,  386,  386,  385,  385,  385,  245,
      245,  385,  385,  385,  385,  180,  220,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  263,  263,

      385,  385,  385,  385,  386,  227,  386,  201,  245,  385,
      385,  385,  385,  401,  220,  385,  385,  385,  385,  385,
      385,  385,  385,  263,  385,  385,  385,  385,  386,  227,
      402,  245,  385,  385,  385,  385,  403,  404,  385,  385,
      385,  385,  263,  385,  385,  385,  385,  386,  405,  406,
      407,  385,  385,  385,  385,  385,  403,  408,  409,  385,
      385,  410,  385,  385,  385,  406,  411,  385,  385,  385,
      408,  412,  385,  385,  385,  410,  385,  385,  385,  411,
      385,  385,  385,  412,    0,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385
    } ;

static const flex_int16_t yy_nxt[1145] =
    {   0,
        4,    5,    6,    4,    7,    8,    9,    4,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   25,   25,   35,   25,   25,   36,   37,
       38,   39,   40,   25,   41,   42,   43,   44,   25,   25,
       25,   25,   45,   46,   47,   48,   49,   49,   49,   56,
       58,   60,   61,   62,   67,   56,   63,   57,   64,   67,
       65,   67,   67,   67,   50,   51,   52,   67,   67,   67,
       67,   67,   67,   67,   67,   69,   70,   67,   67,   71,
       53,   67,   67,   75,  361,   72,   67,   73,   77,   82,

       78,   85,   74,   86,   89,   67,  121,   91,   80,   76,
       87,   88,   67,   83,   90,   92,   79,  103,  102,   84,
       81,   93,   97,   94,   96,   95,  109,  109,  109,   98,
       49,   49,   49,   99,  116,   67,   67,   67,   67,  100,
       67,   67,   67,   67,   67,  101,   67,   67,   50,   51,
       52,  117,   67,   67,   67,   67,  360,   67,  353,   67,
       67,   67,   67,  110,   53,  123,  111,  119,  125,  131,
      112,   67,  129,   67,  118,  122,  127,  124,  120,  126,
      128,  134,   67,  132,  135,  144,  133,   67,   67,  136,
       67,  130,   67,  147,  137,  138,  139,  141,  141,  141,

       67,  153,   67,   67,  114,  140,   67,  148,  157,  159,
      149,  145,  146,  109,  109,  109,  150,   67,  158,   67,
      163,  163,  163,   67,  151,   67,   67,   67,   67,   67,
      154,   67,  152,   67,   67,   67,  142,   67,   67,   67,
       67,  162,  143,  164,   67,  160,   67,  161,  169,  165,
      110,  167,   67,  111,   67,  171,   67,  112,  170,  172,
      168,  166,   67,   67,  176,  141,  141,  141,   67,  352,
      175,  174,   67,   67,  347,   67,  173,   67,  181,  177,
      189,   49,   49,   49,   67,  185,  178,   67,   67,   67,
      183,  183,  183,   67,  180,  186,   67,  198,  205,   50,

       51,   52,  184,  192,  187,  187,  187,  190,  190,  190,
       67,  191,  197,   67,  199,  182,  188,  163,  163,  163,
       67,   67,   67,   67,   67,  203,  204,   67,  202,  210,
      210,  210,  207,   67,   67,   67,  346,  213,  213,  213,
      345,  211,  344,  214,  216,  286,  201,  342,  215,  341,
      209,   67,  206,  215,  208,  212,  213,  213,  213,   67,
      218,  237,  214,  183,  183,  183,  231,  215,  187,  187,
      187,  230,  215,  238,   67,  184,  223,  223,  223,   67,
      188,   67,   67,  190,  190,  190,  216,  240,  224,   67,
      217,   67,  220,  232,  232,  232,  248,  340,  239,  233,

      232,  232,  232,  339,  234,  243,  233,   67,   67,  234,
      241,  234,  227,  247,  242,   67,  234,  210,  210,  210,
      336,  225,  213,  213,  213,  213,  213,  213,   67,  211,
      254,  254,  254,  215,  236,  265,  215,  271,  215,   67,
      335,  215,  249,  249,  249,   67,  245,  235,  250,  249,
      249,  249,  274,  251,  252,  250,  334,  272,  251,   67,
      251,  258,  258,  258,  287,  251,  275,  255,   67,  329,
      256,  305,  290,  333,  257,  223,  223,  223,  266,  266,
      266,  273,  291,  253,  267,  294,  269,  224,   67,  268,
      280,  266,  266,  266,  268,  295,  306,  267,  259,   67,

      309,  260,  268,  326,  263,  261,  276,  268,  232,  232,
      232,  232,  232,  232,  325,  277,  277,  277,  299,  234,
      323,  278,  234,  322,  234,  270,  279,  234,  277,  277,
      277,  279,  235,  308,  278,  282,  282,  282,  307,  279,
      249,  249,  249,  321,  279,  312,  320,  249,  249,  249,
       67,  251,  254,  254,  254,  313,  251,  319,  251,  314,
      314,  314,  281,  251,  258,  258,  258,  296,  296,  296,
      252,  315,  283,  297,  318,  284,  317,  299,  298,  285,
      301,  301,  301,  298,  296,  296,  296,  324,  348,  255,
      297,  316,  256,  216,  311,  298,  257,  282,  282,  282,

      298,  259,  269,  330,  260,  266,  266,  266,  261,  327,
      310,  266,  266,  266,  280,  332,  268,  302,  300,  328,
      303,  268,  268,  280,  304,  299,  343,  268,  277,  277,
      277,  277,  277,  277,  283,   67,   67,  284,   67,  279,
       67,  285,  279,  269,  279,  293,  292,  279,  296,  296,
      296,  296,  296,  296,  301,  301,  301,  289,  288,  298,
      252,   67,  298,   67,  298,   67,   67,  298,  331,  331,
      331,  314,  314,  314,  338,  338,  338,  349,  349,  349,
      235,   67,  215,  264,  331,  331,  331,  215,  351,  351,
      351,  302,   67,  216,  303,  234,  246,   67,  304,   67,

      234,  229,  235,  354,  354,  354,  228,   67,  252,  355,
       67,  269,  222,   67,  356,  338,  338,  338,   67,  356,
      221,   67,  280,  359,  359,  359,  251,  349,  349,  349,
       67,  251,   67,  363,  363,  363,   67,   67,  268,  364,
      351,  351,  351,  268,  365,   67,  114,  196,  195,  365,
      194,  279,  354,  354,  354,  193,  279,  299,  354,  354,
      354,   67,   67,  356,  354,  354,  354,   67,  356,  356,
      355,  368,  368,  368,  356,  356,   67,  369,   67,   67,
      356,   67,  370,  359,  359,  359,   67,  370,   67,  373,
      373,  373,  114,  156,  298,  374,  363,  363,  363,  298,

      375,  155,  363,  363,  363,  375,   67,  365,  363,  363,
      363,   67,  365,  365,  364,  377,  377,  377,  365,  365,
       67,  378,   67,  115,  365,   59,  379,  368,  368,  368,
      114,  379,  107,  368,  368,  368,  106,  105,  370,  368,
      368,  368,  105,  370,  370,  369,  381,  381,  381,  370,
      370,  104,  382,   67,   66,  370,   59,  383,  373,  373,
      373,   55,  383,   54,  373,  373,  373,  385,  385,  375,
      373,  373,  373,  385,  375,  375,  374,  377,  377,  377,
      375,  375,  385,  377,  377,  377,  375,  385,  379,  377,
      377,  377,  385,  379,  379,  378,  381,  381,  381,  379,

      379,  385,  381,  381,  381,  379,  385,  383,  381,  381,
      381,  385,  383,  383,  382,  385,  385,  385,  383,  383,
      385,  385,  385,  385,  383,   68,  385,  385,   68,  108,
      108,  385,  108,  108,  108,  108,  113,  113,  113,  113,
      113,  113,  113,  179,  179,  385,  385,  385,  179,  200,
      200,  385,  385,  385,  200,  216,  216,  216,  216,  385,
      216,  219,  219,  385,  385,  219,  219,  226,  226,  385,
      385,  385,  226,  235,  235,  235,  235,  385,  235,  244,
      244,  385,  385,  244,  244,  252,  252,  252,  252,  385,
      252,  262,  262,  385,  385,  262,  262,  269,  269,  269,

      269,  385,  269,  280,  280,  280,  280,  385,  280,  299,
      299,  299,  299,  385,  299,  337,  337,  385,  337,  385,
      337,  350,  350,  385,  350,  385,  350,  357,  357,  357,
      357,  385,  357,  358,  358,  385,  358,  385,  358,  362,
      362,  385,  362,  385,  362,  366,  366,  366,  366,  385,
      366,  367,  367,  385,  367,  385,  367,  371,  371,  371,
      371,  385,  371,  372,  372,  385,  372,  385,  372,  376,
      376,  376,  376,  385,  376,  380,  380,  380,  380,  385,
      380,  384,  384,  384,  384,  385,  384,    3,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385
    } ;

static const flex_int16_t yy_chk[1145] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    7,    7,   15,
       17,   19,   19,   21,   29,   17,   21,   15,   22,   30,
       22,   31,   32,   37,    7,    7,    7,   33,   35,   34,
       36,   38,   41,   73,   44,   29,   29,   40,   39,   29,
        7,   43,  348,   30,  347,   29,   69,   29,   31,   34,

       32,   35,   29,   35,   36,   42,   73,   37,   33,   30,
       35,   35,   70,   34,   36,   38,   32,   44,   43,   34,
       33,   39,   41,   39,   40,   39,   57,   57,   57,   42,
       49,   49,   49,   42,   69,   71,   72,   74,   76,   42,
       75,   78,   80,   79,   77,   42,   83,   82,   49,   49,
       49,   70,   81,   84,   87,   89,  344,   85,  336,   86,
       97,   93,   90,   57,   49,   75,   57,   72,   77,   82,
       57,   98,   81,  102,   71,   74,   79,   76,   72,   78,
       80,   85,   91,   83,   86,   93,   84,   94,   96,   87,
       99,   81,  100,   97,   89,   90,   90,   92,   92,   92,

      101,  102,  103,   92,  114,   91,  116,   98,  112,  114,
       98,   94,   96,  109,  109,  109,   99,  118,  112,  117,
      119,  119,  119,  120,  100,  122,  119,  123,  127,  125,
      103,  126,  101,  129,  128,  130,   92,  131,  134,  136,
      138,  118,   92,  120,  139,  116,  140,  117,  127,  122,
      109,  125,  145,  109,  142,  129,  151,  109,  128,  130,
      126,  123,  154,  161,  138,  141,  141,  141,  167,  333,
      136,  134,  146,  153,  328,  160,  131,  162,  142,  139,
      151,  143,  143,  143,  164,  145,  140,  143,  165,  166,
      144,  144,  144,  171,  141,  146,  144,  161,  167,  143,

      143,  143,  144,  154,  149,  149,  149,  152,  152,  152,
      149,  153,  160,  152,  162,  143,  149,  163,  163,  163,
      169,  172,  175,  202,  178,  165,  166,  182,  164,  176,
      176,  176,  171,  198,  203,  176,  327,  179,  179,  179,
      326,  176,  325,  179,  248,  248,  163,  323,  179,  320,
      175,  197,  169,  179,  172,  178,  180,  180,  180,  206,
      182,  202,  180,  183,  183,  183,  198,  180,  187,  187,
      187,  197,  180,  203,  204,  183,  189,  189,  189,  207,
      187,  209,  189,  190,  190,  190,  217,  206,  189,  212,
      180,  208,  183,  200,  200,  200,  217,  319,  204,  200,

      201,  201,  201,  316,  200,  209,  201,  225,  241,  200,
      207,  201,  190,  212,  208,  230,  201,  210,  210,  210,
      313,  189,  213,  213,  213,  214,  214,  214,  242,  210,
      221,  221,  221,  213,  201,  225,  214,  230,  213,  265,
      312,  214,  219,  219,  219,  305,  210,  236,  219,  220,
      220,  220,  241,  219,  253,  220,  311,  236,  219,  240,
      220,  222,  222,  222,  253,  220,  242,  221,  243,  305,
      221,  265,  257,  310,  221,  223,  223,  223,  226,  226,
      226,  240,  257,  220,  226,  261,  270,  223,  307,  226,
      281,  227,  227,  227,  226,  261,  270,  227,  222,  271,

      281,  222,  227,  303,  223,  222,  243,  227,  232,  232,
      232,  233,  233,  233,  302,  244,  244,  244,  299,  232,
      295,  244,  233,  294,  232,  227,  244,  233,  245,  245,
      245,  244,  272,  272,  245,  246,  246,  246,  271,  245,
      249,  249,  249,  293,  245,  285,  292,  250,  250,  250,
      329,  249,  254,  254,  254,  285,  249,  291,  250,  286,
      286,  286,  245,  250,  258,  258,  258,  262,  262,  262,
      287,  287,  246,  262,  290,  246,  289,  300,  262,  246,
      264,  264,  264,  262,  263,  263,  263,  300,  329,  254,
      263,  288,  254,  286,  284,  263,  254,  282,  282,  282,

      263,  258,  306,  306,  258,  266,  266,  266,  258,  304,
      283,  267,  267,  267,  309,  309,  266,  264,  263,  304,
      264,  266,  267,  280,  264,  324,  324,  267,  277,  277,
      277,  278,  278,  278,  282,  276,  275,  282,  274,  277,
      273,  282,  278,  269,  277,  260,  259,  278,  296,  296,
      296,  297,  297,  297,  301,  301,  301,  256,  255,  296,
      252,  247,  297,  239,  296,  238,  237,  297,  308,  308,
      308,  314,  314,  314,  315,  315,  315,  330,  330,  330,
      235,  231,  314,  224,  331,  331,  331,  314,  332,  332,
      332,  301,  218,  216,  301,  331,  211,  205,  301,  199,

      331,  196,  308,  337,  337,  337,  193,  192,  315,  337,
      191,  330,  188,  186,  337,  338,  338,  338,  185,  337,
      184,  181,  332,  343,  343,  343,  338,  349,  349,  349,
      177,  338,  174,  350,  350,  350,  173,  170,  349,  350,
      351,  351,  351,  349,  350,  168,  159,  158,  157,  350,
      156,  351,  354,  354,  354,  155,  351,  343,  355,  355,
      355,  150,  148,  354,  357,  357,  357,  147,  354,  355,
      357,  358,  358,  358,  355,  357,  137,  358,  135,  133,
      357,  132,  358,  359,  359,  359,  124,  358,  121,  362,
      362,  362,  113,  111,  359,  362,  363,  363,  363,  359,

      362,  110,  364,  364,  364,  362,   95,  363,  366,  366,
      366,   88,  363,  364,  366,  367,  367,  367,  364,  366,
       68,  367,   67,   63,  366,   59,  367,  368,  368,  368,
       58,  367,   53,  369,  369,  369,   52,   51,  368,  371,
      371,  371,   50,  368,  369,  371,  372,  372,  372,  369,
      371,   46,  372,   25,   23,  371,   18,  372,  373,  373,
      373,   13,  372,    9,  374,  374,  374,    3,    0,  373,
      376,  376,  376,    0,  373,  374,  376,  377,  377,  377,
      374,  376,    0,  378,  378,  378,  376,    0,  377,  380,
      380,  380,    0,  377,  378,  380,  381,  381,  381,  378,

      380,    0,  382,  382,  382,  380,    0,  381,  384,  384,
      384,    0,  381,  382,  384,    0,    0,    0,  382,  384,
        0,    0,    0,    0,  384,  386,    0,    0,  386,  387,
      387,    0,  387,  387,  387,  387,  388,  388,  388,  388,
      388,  388,  388,  389,  389,    0,    0,    0,  389,  390,
      390,    0,    0,    0,  390,  391,  391,  391,  391,    0,
      391,  392,  392,    0,    0,  392,  392,  393,  393,    0,
        0,    0,  393,  394,  394,  394,  394,    0,  394,  395,
      395,    0,    0,  395,  395,  396,  396,  396,  396,    0,
      396,  397,  397,    0,    0,  397,  397,  398,  398,  398,

      398,    0,  398,  399,  399,  399,  399,    0,  399,  400,
      400,  400,  400,    0,  400,  401,  401,    0,  401,    0,
      401,  402,  402,    0,  402,    0,  402,  403,  403,  403,
      403,    0,  403,  404,  404,    0,  404,    0,  404,  405,
      405,    0,  405,    0,  405,  406,  406,  406,  406,    0,
      406,  407,  407,    0,  407,    0,  407,  408,  408,  408,
      408,    0,  408,  409,  409,    0,  409,    0,  409,  410,
      410,  410,  410,    0,  410,  411,  411,  411,  411,    0,
      411,  412,  412,  412,  412,    0,  412,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385
    } ;

static const flex_int16_t yy_rule_linenum[120] =
    {   0,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   52,   53,   54,   55,   57,   58,   59,   60,
       62,   63,   64,   65,   67,   68,   69,   70,   72,   73,
       74,   75,   77,   78,   79,   80,   82,   83,   84,   85,
       86,   87,   89,   91,   97,   99,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
      135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  154,

      155,  156,  157,  158,  159,  160,  161,  162,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  173,  177
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "mc_lexer.l"
#line 2 "mc_lexer.l"
/* C++ string header, for string ops below */
#include <string>
#include <string.h>


/* Implementation of yyFlexScanner */ 
#include "mc_scanner.hpp"
#undef  YY_DECL
#define YY_DECL int MC::MC_Scanner::yylex( MC::MC_Parser::semantic_type * const lval, MC::MC_Parser::location_type *loc )

/* typedef to make the returns for the tokens shorter */
using token = MC::MC_Parser::token;

/* define yyterminate as this instead of NULL */
#define yyterminate() return( token::END )

/* msvc2010 requires that we exclude this header file. */
#define YY_NO_UNISTD_H

/* update location on matching */
#define YY_USER_ACTION loc->step(); loc->columns(yyleng);

#line 903 "/home/sinan/repos/research/alloy_bison_parser/build/mc_lexer.yy.cc"
#line 904 "/home/sinan/repos/research/alloy_bison_parser/build/mc_lexer.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 32 "mc_lexer.l"

          /** Code executed at the beginning of yylex **/
#line 35 "mc_lexer.l"
            yylval = lval;



#line 1104 "/home/sinan/repos/research/alloy_bison_parser/build/mc_lexer.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 386 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1088 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 120 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 120 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 121 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 39 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(2); return token::NOQ;}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 40 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(2); return token::NOQ;}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 41 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(3); return token::ALLQ;}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 42 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(3); return token::ALLQ;}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 43 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(3); return token::SUMQ;}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 44 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(3); return token::SUMQ;}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 45 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(4); return token::LONEQ;}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 46 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(4); return token::LONEQ;}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 47 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(4); return token::SOMEQ;}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 48 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(4); return token::SOMEQ;}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 49 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(3); return token::ONEQ;}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 50 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); yyless(3); return token::ONEQ;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 52 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::SET_ARROW_SET;}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 53 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::SET_ARROW_ONE;}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 54 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::SET_ARROW_LONE;}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 55 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::SET_ARROW_SOME;}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 57 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::ONE_ARROW_SET;}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 58 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::ONE_ARROW_ONE;}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 59 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::ONE_ARROW_LONE;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 60 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::ONE_ARROW_SOME;}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 62 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::LONE_ARROW_SET;}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 63 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::LONE_ARROW_ONE;}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 64 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::LONE_ARROW_LONE;}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 65 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::LONE_ARROW_SOME;}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 67 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::SOME_ARROW_SET;}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 68 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::SOME_ARROW_ONE;}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 69 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();return token::SOME_ARROW_LONE;}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 70 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::SOME_ARROW_SOME;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 72 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::ARROW_SET;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 73 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::ARROW_ONE;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 74 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::ARROW_LONE;}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 75 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::ARROW_SOME;}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 77 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::SET_ARROW;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 78 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::ONE_ARROW;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 79 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::LONE_ARROW;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 80 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::SOME_ARROW;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 82 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::NOTEQUALS;}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 83 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::NOTIN;}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 84 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::NOTLT;}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 85 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::NOTGT;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 86 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::NOTLTE;}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 87 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines(); return token::NOTGTE;}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 89 "mc_lexer.l"
{for (int i = 0; i < yyleng; i++) if (yytext[i] == '\n') loc->lines();}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 91 "mc_lexer.l"
{
               // Update line number
               loc->lines();
               // return( token::NEWLINE );
            }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "mc_lexer.l"
;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 99 "mc_lexer.l"
;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "mc_lexer.l"
return token::MODULE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "mc_lexer.l"
return token::OPEN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "mc_lexer.l"
return token::AS;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "mc_lexer.l"
return token::ABSTRACT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "mc_lexer.l"
return token::ACTION;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "mc_lexer.l"
return token::AFTER;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "mc_lexer.l"
return token::BEFORE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "mc_lexer.l"
return token::LOOP;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "mc_lexer.l"
return token::SIG;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "mc_lexer.l"
return token::EXTENDS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "mc_lexer.l"
return token::DISJ;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "mc_lexer.l"
return token::DYNAMIC;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "mc_lexer.l"
return token::FACT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "mc_lexer.l"
return token::PRED;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "mc_lexer.l"
return token::FUN;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "mc_lexer.l"
return token::ASSERT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "mc_lexer.l"
return token::RUN;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "mc_lexer.l"
return token::CHECK;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "mc_lexer.l"
return token::FOR;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "mc_lexer.l"
return token::BUT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "mc_lexer.l"
return token::EXACTLY;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "mc_lexer.l"
return token::THIS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "mc_lexer.l"
return token::AT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "mc_lexer.l"
return token::ELSE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "mc_lexer.l"
return token::NONE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "mc_lexer.l"
return token::UNIV;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "mc_lexer.l"
return token::IDEN;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "mc_lexer.l"
return token::LET;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "mc_lexer.l"
return token::LPAREN;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "mc_lexer.l"
return token::RPAREN;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "mc_lexer.l"
return token::LCURLY;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "mc_lexer.l"
return token::RCURLY;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "mc_lexer.l"
return token::LSQUARE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "mc_lexer.l"
return token::RSQUARE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "mc_lexer.l"
return token::COMMA;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "mc_lexer.l"
return token::BAR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "mc_lexer.l"
return token::OR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "mc_lexer.l"
return token::AND;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "mc_lexer.l"
return token::IFF;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "mc_lexer.l"
return token::INTERSECTION;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "mc_lexer.l"
return token::UNION;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "mc_lexer.l"
return token::SUBTRACTION;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "mc_lexer.l"
return token::OVERRIDE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "mc_lexer.l"
return token::DOMAIN_R;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "mc_lexer.l"
return token::RANGE_R;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "mc_lexer.l"
return token::DOT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "mc_lexer.l"
return token::ARROW;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "mc_lexer.l"
return token::NO;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "mc_lexer.l"
return token::SET;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "mc_lexer.l"
return token::LONE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "mc_lexer.l"
return token::SOME;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "mc_lexer.l"
return token::ONE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "mc_lexer.l"
return token::IMPLIES;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "mc_lexer.l"
return token::IN;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "mc_lexer.l"
return token::EQUALS;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "mc_lexer.l"
return token::LT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "mc_lexer.l"
return token::GT;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "mc_lexer.l"
return token::LTE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "mc_lexer.l"
return token::GTE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "mc_lexer.l"
return token::NOT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "mc_lexer.l"
return token::CARD;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "mc_lexer.l"
return token::TRANSP;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "mc_lexer.l"
return token::REFL;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "mc_lexer.l"
return token::TRAN_CLO;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "mc_lexer.l"
return token::ASSIGN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "mc_lexer.l"
return token::COLUMN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "mc_lexer.l"
return token::FORSLASH;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "mc_lexer.l"
return token::SEMICOLUMN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "mc_lexer.l"
return token::SOMETIMES;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "mc_lexer.l"
return token::ALWAYS;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "mc_lexer.l"
return token::SEQ;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 173 "mc_lexer.l"
{
               yylval->build< std::string >( yytext );
               return( token::NAME );
               }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 177 "mc_lexer.l"
{
               yylval->build< std::string >( yytext );
               return( token::INT );
               }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 182 "mc_lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1837 "/home/sinan/repos/research/alloy_bison_parser/build/mc_lexer.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 386 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 386 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 385);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 182 "mc_lexer.l"




